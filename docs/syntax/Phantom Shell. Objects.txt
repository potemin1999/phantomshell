В Phantom Shell будет возможность работать с объектами. По большей части, это будет выглядить в стиле Java, так как там это прекрасно организовано.

ОБЪЕКТНЫЕ ФАЙЛЫ
Код объектных классов будет храниться в специальных объектных файлах или библиотеках. Пользователь сможет как использовать набор готовых библиотек, так и создавать собственные.

Класс определяется с помощью ключевого слова сlass:
class Shell{

}

После названия класса идут фигурные скобки, в которых мы определяем конструкторы, методы и поля класса:
class Cat{
	Cat()//конструктор
	{
		
	}
	String name; //
	int age; // поля
	void printAge() //метод
	{
		print(age);
	}
}

Мы можем наследовать классы с помощью ключевого слова extends
class BengalCat extends Cat{
	BengalCat()
	{
		this.pattern = 'Spotted';
	}
	String pattern;
}

Импорт объектных файлов.

Прежде чем начать работать с готовыми объектными классами, их нужно импортировать в скрипт с помощью специальной конструкции:
//TODO library import

ССЫЛКИ
В следующем выражении:
def <object-type> linkName = new <object-type>;
левая половина означает объявление ссылки типа <object-type>, правая половина - создание экземпляра типа <object-type>. По итогу, ссылке присваивается адрес соответствующего объекта.
На один и тот же объект может ссылаться несколько ссылок или же ни одной (если такое произойдёт, то доступ к объекты будет утерян и его соберёт Garbage Collector).

Примеры разлчиных конструкций:
def <object-type> linkName2 = linkName; // создать новую ссылку на объект,
					// на который указывает ссылка linkName

linkName2 = null; // переставить ссылку на специальный нулевой объект

Вызов атрибутов и методов объектов традиционно работает через точку.
def result1 = linkName.function[arg1, arg2];
def result2 = linkName.attribute;
linkName.procedure[];