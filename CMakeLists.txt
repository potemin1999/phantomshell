cmake_minimum_required(VERSION 3.8)
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif ()

set(CMAKE_C_FLAGS "-Wall -Wreturn-type")
set(CMAKE_C_FLAGS_DEBUG "-pg -g")
set(CMAKE_C_FLAGS_RELEASE "-O2")

project(PhantomShell)
message("Loading phantom shell configuration : " ${CMAKE_BUILD_TYPE})
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 99)
set(BUILD_NAME PhantomShell)
set(BUILD_PATH "${PROJECT_SOURCE_DIR}/build")
set(BUILD_TESTING true)
set(CMAKE_BINARY_DIR "${BUILD_PATH}/cmake/bin")
set(CMAKE_LIBRARY_PATH "${BUILD_PATH}/cmake/lib")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${BUILD_PATH}/lib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${BUILD_PATH}/lib")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${BUILD_PATH}/bin")
set(CMAKE_RUN_CMD "$ENV{1}")

message("${CMAKE_RUN_CMD}")
if ($ENV{SHELL} MATCHES "bash|csh|zsh")
    if ($ENV{AGENT} MATCHES "intellij")
    else ()
        string(ASCII 27 Esc)
        set(Color_RST "${Esc}[0;0m")
        set(Color_RED "${Esc}[0;31m")
        set(Color_YELLOW "${Esc}[0;33m")
        set(Color_BOLD "${Esc}[1;38m")
    endif ()
endif ()

message("${Color_YELLOW}C Compiler version: ${CMAKE_C_COMPILER_VERSION} ${Color_RST}")
if (${CMAKE_BUILD_TYPE} STREQUAL Release)
    message("${Color_BOLD}Release build type : ${Color_RST}")
    message(" configuration: Parser type checking disabled")
    add_compile_definitions(__PARSER_DISABLE_TYPE_CHECK)
    add_compile_definitions(__PARSER_DISABLE_STRINGIFY)
    message(" configuration: Lexer token tracing disabled")
    add_compile_definitions(__LEXER_DISABLE_TOKEN_TRACING)
endif ()
if (${CMAKE_BUILD_TYPE} STREQUAL Debug)
    message("${Color_BOLD}Debug build type : ${Color_RST}")
    message(" configuration: VM_EXECUTION_TRACE enabled")
    add_compile_definitions(VM_EXECUTION_TRACE)
    add_compile_definitions(__LEXER_DISABLE_TOKEN_TRACING)
endif ()

add_compile_definitions(__simbuild__)
add_compile_definitions(__debug__)

#shell module
set(SHELL psh)
file(GLOB_RECURSE SHELL_SOURCE_FILES "src/*.c")
add_executable(${SHELL} ${SHELL_SOURCE_FILES})
target_include_directories(${SHELL} PRIVATE "src")
set_target_properties(${SHELL} PROPERTIES LINKER_LANGUAGE C)